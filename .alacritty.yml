# Configuration for Alacritty, the GPU enhanced terminal emulator.

env:
  TERM: xterm-256color

background_opacity: 0.95

window:
  columns: 120
  lines: 25

  #  position:
  #    x: 850
  #    y: 50

  padding:
    x: 2
    y: 2

  dynamic_padding: true

  # - full: Borders and title bar
  # - none: Neither borders nor title bar
  decorations: full
  # startup_mode: Maximized

scrolling:
  history: 10000
  multiplier: 3
  auto_scroll: false

tabspaces: 2

font:
  size: 13.0
  normal:
    family: SauceCodePro Nerd Font Mono
    style: Medium

  bold:
    style: Black
  italic:
    style: Italic
  bold_italic:
    style: Bold Italic

# Base16 Atelier Sulphurpool Light 256 - alacritty color config
# Bram de Haan (http://atelierbramdehaan.nl)
colors:
  # Default colors
  primary:
    background: '0xf5f7ff'
    foreground: '0x5e6687'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0xf5f7ff'
    cursor: '0x5e6687'

  # Normal colors
  normal:
    black:   '0xf5f7ff'
    red:     '0xc94922'
    green:   '0xac9739'
    yellow:  '0xc08b30'
    blue:    '0x3d8fd1'
    magenta: '0x6679cc'
    cyan:    '0x22a2c9'
    white:   '0x5e6687'

  # Bright colors
  bright:
    black:   '0x898ea4'
    red:     '0xc94922'
    green:   '0xac9739'
    yellow:  '0xc08b30'
    blue:    '0x3d8fd1'
    magenta: '0x6679cc'
    cyan:    '0x22a2c9'
    white:   '0x202746'

  indexed_colors:
    - { index: 16, color: '0xc76b29' }
    - { index: 17, color: '0x9c637a' }
    - { index: 18, color: '0xdfe2f1' }
    - { index: 19, color: '0x979db4' }
    - { index: 20, color: '0x6b7394' }
    - { index: 21, color: '0x293256' }

draw_bold_text_with_bright_colors: true

# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
visual_bell:
  animation: EaseOutExpo
  duration: 100
  color: '0xffffff'

cursor:
  #   - â–‡ Block
  #   - _ Underline
  #   - | Beam
  style: Beam
  unfocused_hollow: false

live_config_reload: true

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  url:
    launcher:
      program: xdg-open
    modifiers: Control

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
  # (Windows, Linux, and BSD only)
  - { key: V, mods: Control|Shift, action: Paste }
  - { key: C, mods: Control|Shift, action: Copy }
  - { key: Insert, mods: Shift, action: PasteSelection }
  - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Equals, mods: Control, action: IncreaseFontSize }
  - { key: Add, mods: Control, action: IncreaseFontSize }
  - { key: Subtract, mods: Control, action: DecreaseFontSize }
  - { key: Minus, mods: Control, action: DecreaseFontSize }

  - { key: Paste, action: Paste }
  - { key: Copy, action: Copy }
  - { key: L, mods: Control, action: ClearLogNotice }
  - { key: L, mods: Control, chars: "\x0c" }
  - { key: PageUp, mods: Shift, action: ScrollPageUp, mode: ~Alt }
  - { key: PageDown, mods: Shift, action: ScrollPageDown, mode: ~Alt }
  - { key: Home, mods: Shift, action: ScrollToTop, mode: ~Alt }
  - { key: End, mods: Shift, action: ScrollToBottom, mode: ~Alt }
  - { key: Return, mods: Control|Shift, action: SpawnNewInstance }
  - { key: Q, mods: Control|Shift, action: Quit }
